//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BacLabClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMessageService", CallbackContract=typeof(BacLabClient.ServiceReference1.IMessageServiceCallback))]
    public interface IMessageService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/AddMessage")]
        void AddMessage(int senderId, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IMessageService/AddMessage")]
        System.IAsyncResult BeginAddMessage(int senderId, string message, System.AsyncCallback callback, object asyncState);
        
        void EndAddMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessageService/Subscribe", ReplyAction="http://tempuri.org/IMessageService/SubscribeResponse")]
        bool Subscribe(string adress);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMessageService/Subscribe", ReplyAction="http://tempuri.org/IMessageService/SubscribeResponse")]
        System.IAsyncResult BeginSubscribe(string adress, System.AsyncCallback callback, object asyncState);
        
        bool EndSubscribe(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessageService/OnMessageAdded")]
        void OnMessageAdded(string message, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://tempuri.org/IMessageService/OnMessageAdded")]
        System.IAsyncResult BeginOnMessageAdded(string message, System.DateTime timestamp, System.AsyncCallback callback, object asyncState);
        
        void EndOnMessageAdded(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageServiceChannel : BacLabClient.ServiceReference1.IMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageServiceClient : System.ServiceModel.DuplexClientBase<BacLabClient.ServiceReference1.IMessageService>, BacLabClient.ServiceReference1.IMessageService {
        
        private BeginOperationDelegate onBeginAddMessageDelegate;
        
        private EndOperationDelegate onEndAddMessageDelegate;
        
        private System.Threading.SendOrPostCallback onAddMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginSubscribeDelegate;
        
        private EndOperationDelegate onEndSubscribeDelegate;
        
        private System.Threading.SendOrPostCallback onSubscribeCompletedDelegate;
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddMessageCompleted;
        
        public event System.EventHandler<SubscribeCompletedEventArgs> SubscribeCompleted;
        
        public void AddMessage(int senderId, string message) {
            base.Channel.AddMessage(senderId, message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddMessage(int senderId, string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddMessage(senderId, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddMessage(System.IAsyncResult result) {
            base.Channel.EndAddMessage(result);
        }
        
        private System.IAsyncResult OnBeginAddMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int senderId = ((int)(inValues[0]));
            string message = ((string)(inValues[1]));
            return this.BeginAddMessage(senderId, message, callback, asyncState);
        }
        
        private object[] OnEndAddMessage(System.IAsyncResult result) {
            this.EndAddMessage(result);
            return null;
        }
        
        private void OnAddMessageCompleted(object state) {
            if ((this.AddMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddMessageAsync(int senderId, string message) {
            this.AddMessageAsync(senderId, message, null);
        }
        
        public void AddMessageAsync(int senderId, string message, object userState) {
            if ((this.onBeginAddMessageDelegate == null)) {
                this.onBeginAddMessageDelegate = new BeginOperationDelegate(this.OnBeginAddMessage);
            }
            if ((this.onEndAddMessageDelegate == null)) {
                this.onEndAddMessageDelegate = new EndOperationDelegate(this.OnEndAddMessage);
            }
            if ((this.onAddMessageCompletedDelegate == null)) {
                this.onAddMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddMessageCompleted);
            }
            base.InvokeAsync(this.onBeginAddMessageDelegate, new object[] {
                        senderId,
                        message}, this.onEndAddMessageDelegate, this.onAddMessageCompletedDelegate, userState);
        }
        
        public bool Subscribe(string adress) {
            return base.Channel.Subscribe(adress);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSubscribe(string adress, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSubscribe(adress, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSubscribe(System.IAsyncResult result) {
            return base.Channel.EndSubscribe(result);
        }
        
        private System.IAsyncResult OnBeginSubscribe(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string adress = ((string)(inValues[0]));
            return this.BeginSubscribe(adress, callback, asyncState);
        }
        
        private object[] OnEndSubscribe(System.IAsyncResult result) {
            bool retVal = this.EndSubscribe(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSubscribeCompleted(object state) {
            if ((this.SubscribeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SubscribeCompleted(this, new SubscribeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SubscribeAsync(string adress) {
            this.SubscribeAsync(adress, null);
        }
        
        public void SubscribeAsync(string adress, object userState) {
            if ((this.onBeginSubscribeDelegate == null)) {
                this.onBeginSubscribeDelegate = new BeginOperationDelegate(this.OnBeginSubscribe);
            }
            if ((this.onEndSubscribeDelegate == null)) {
                this.onEndSubscribeDelegate = new EndOperationDelegate(this.OnEndSubscribe);
            }
            if ((this.onSubscribeCompletedDelegate == null)) {
                this.onSubscribeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSubscribeCompleted);
            }
            base.InvokeAsync(this.onBeginSubscribeDelegate, new object[] {
                        adress}, this.onEndSubscribeDelegate, this.onSubscribeCompletedDelegate, userState);
        }
    }
}
